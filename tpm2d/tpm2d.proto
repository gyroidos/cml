/*
 * This file is part of trust|me
 * Copyright(c) 2013 - 2019 Fraunhofer AISEC
 * Fraunhofer-Gesellschaft zur FÃ¶rderung der angewandten Forschung e.V.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2 (GPL 2), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GPL 2 license for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, see <http://www.gnu.org/licenses/>
 *
 * The full GNU General Public License is included in this distribution in
 * the file called "COPYING".
 *
 * Contact Information:
 * Fraunhofer AISEC <trustme@aisec.fraunhofer.de>
 */

syntax = "proto2";

option java_package = "de.fraunhofer.aisec.trustme";

import "attestation.proto";

message ControllerToTpm {
	reserved 2 to 4; // legacy
	enum Code {
		reserved 1; // legacy
		// setup a new dm mapping with a key that is stored in the TPM
		// availability of the key is bound to correct UEFI secure boot state via PCR7
		DMCRYPT_SETUP = 2;
		// exit tpm2d
		EXIT = 3;
		// request random data from the TPM
		RANDOM_REQ = 4;
		// clear TPM using the lockout password
		CLEAR = 5;
		// locks the nvindex containing the FDE key so it cannot be read until reboot
		DMCRYPT_LOCK = 6;
		// change the TPM's owner hierachy's password
		CHANGE_OWNER_PWD = 7;
		// reset the nvindex containing the FDE key
		DMCRYPT_RESET = 8;
		// append a measurement to tpm2d's internal list and
		// extend TPM PCR11 (used for container measurements)
		ML_APPEND = 9;
	}

	required Code code = 1;

	// if command FDE_DM_SETUP this is the blk device which is used
	// as pysical device for the mapping
	optional string dmcrypt_device = 5;
	// passphrase for for command, e.g., nv index auth of tpm
	optional string password = 6;
	// amount of random data requested
	optional int32 rand_size = 7;

	// new passphrase for auth changing commands, e.g., change owner auth of tpm
	optional string password_new = 8;

	// file to be measured, e.g., the container read-only file system images
	optional string ml_filename = 9;
	// digest of the measured file using ml_hashalg
	optional bytes ml_datahash = 10;
	// hash algorithm used to create ml_datahash
	optional HashAlgLen ml_hashalg = 11;
}

message TpmToController {
	reserved 2 to 7; // legacy
	enum Code {
		reserved 1; // legacy
		// message contains response field
		GENERIC_RESPONSE = 2;
		// message contains fde_response field
		FDE_RESPONSE = 3;
		// message contains rand_data field
		RANDOM_RESPONSE = 4;
	}

	enum GenericResponse {
		// operation succeeded
		CMD_OK = 1;
		// operation failed
		CMD_FAILED = 2;
	}
	enum FdeResponse {
		// operation succeeded
		FDE_OK = 1;
		// TPM authentication failed
		FDE_AUTH_FAILED = 2;
		// failed to generate a new key and store it in the TPM
		FDE_KEYGEN_FAILED = 3;
		// no TPM device available
		FDE_NO_DEVICE = 4;
		// access to key locked until reboot
		FDE_KEY_ACCESS_LOCKED = 5;
		// FDE key not set in TPM
		FDE_RESET = 6;
		// an unexpected error occurred
		FDE_UNEXPECTED_ERROR = 7;
	}

	required Code code = 1;

	optional GenericResponse response = 8;

	optional FdeResponse fde_response = 9;

	optional string rand_data = 10;

	// the measurement list in ima binary format
	required bytes ml_entry = 11;
}
