/*
 * This file is part of GyroidOS
 * Copyright(c) 2013 - 2020 Fraunhofer AISEC
 * Fraunhofer-Gesellschaft zur FÃ¶rderung der angewandten Forschung e.V.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2 (GPL 2), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GPL 2 license for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, see <http://www.gnu.org/licenses/>
 *
 * The full GNU General Public License is included in this distribution in
 * the file called "COPYING".
 *
 * Contact Information:
 * Fraunhofer AISEC <gyroidos@aisec.fraunhofer.de>
 */

syntax = "proto2";

option java_package = "de.fraunhofer.aisec.trustme";

/**
 * Supported hash algorithms.
 */
enum HashAlgo {
	SHA1 = 1;
	SHA256 = 2;
	SHA512 = 3;
}

/**
 * Supported token types.
 */
enum TokenType {
	NONE = 1;
	SOFT = 2;
	USB = 3;
	PKCS11 = 4;
}


message DaemonToToken {
	enum Code {
		LOCK = 1;	// Locks the token
		UNLOCK = 2;	// Unlocks the token (need [token_pin])

		CHANGE_PIN = 3;	// change the token passphrase (needs [token_pin] [token_pin_new])
		PROVISION_PIN = 4; // initially set the authentication token (needs [transport pin] [token_new_pin])

		WRAP_KEY = 10;	// Wraps a key ([unwrapped_key])
		UNWRAP_KEY = 11;	// Unwraps a key ([wrapped_key])

		DERIVE_KEY = 20;	// Derives a key from [pbdfk_salt] and [pbkdf_pass].

		PULL_DEVICE_CSR = 40;	// pulls the device csr
		PUSH_DEVICE_CERT = 41; // pushes back the certifcate (signed csr)

		// crypto commands unrelated to actual secure element (FIXME move elsewhere?!)
		CRYPTO_HASH_FILE = 50;		// compute hash for file [hash_file]
		CRYPTO_HASH_BUF = 51;		// compute hash for buffer [hash_buf]
		CRYPTO_VERIFY_FILE = 60;	// verify certificate and signature on data given in [verify_*_file]
		CRYPTO_VERIFY_BUF = 61;	// verify certificate and signature on data given in [verify_*_buf]

		TOKEN_ADD = 90;	// create a new scd token
		TOKEN_REMOVE = 91;	// free a scd token
		TOKEN_QUERY_PAIR_STATE = 92;	// query if the token has been paired to the device

		REGISTER_EVENT_LISTENER = 100;	// Tell SCD to send events on this connection
	}


	required Code code = 1;

	optional string token_pin = 2;		// for unlocking and changing of the token
	optional string token_newpin = 3;	// for changing pin of the token

	// the type of the token
	optional TokenType token_type = 4 [default = SOFT];

	// the uuid of the token
	optional string token_uuid = 5 [default = "00000000-0000-0000-0000-000000000000"];

	optional string container_uuid = 6;	// can be used as input for key wrapping

	optional bytes pairing_secret = 7; // to bind the token to the device

	optional string usbtoken_serial = 8; // identify the usb token reader by its serial

	optional string pkcs11_module = 9; // path to PKCS#11-module

	optional bytes unwrapped_key = 10;	// for wrapping a key
	optional bytes wrapped_key = 11;	// for (un)wrapping a key

	optional string pbkdf_pass = 20;	// for key derivation
	optional bytes pbkdf_salt = 21;		// for key derivation

	optional bytes device_cert = 41;	// for PUSH_CERT

	optional HashAlgo hash_algo = 50;	// determines hash algorithm for hashing
	optional string hash_file = 51;		// the full path to the file to hash
	optional bytes hash_buf = 52;		// buf with data to hash

	optional string verify_data_file = 60;	// file with data to verify
	optional string verify_sig_file = 61;	// file with signature for data file
	optional string verify_cert_file = 62;	// file with certificate

	optional bytes verify_data_buf = 70;	// buf with data to verify
	optional bytes verify_sig_buf = 71;	// buf with signature for data file
	optional bytes verify_cert_buf = 72;	// buf with certificate

	optional bool verify_ignore_time = 80;	// ignore time during certificate check
}

message TokenToDaemon {
	enum Code {
		DERIVED_KEY = 20;		// -> [derived_key]
		UNLOCK_FAILED = 21;		// unlocking the token failed
		UNLOCK_SUCCESSFUL = 22;		// unlocking the token succeeded
		LOCK_FAILED = 23;		// locking the token failed
		LOCK_SUCCESSFUL = 24;		// locking the token succeeded
		PASSWD_WRONG = 25;		// wrong password to unlock the token
		WRAPPED_KEY = 26;		// -> [wrapped_key]
		UNWRAPPED_KEY = 27;		// -> [unwrapped key]
		LOCKED_TILL_REBOOT = 28;
		CHANGE_PIN_FAILED = 29;		// pin change of the token failed
		CHANGE_PIN_SUCCESSFUL = 30;	// pin change of the token was successful
		PROVISION_PIN_FAILED = 31;	// provisioning of the token auth code failed
		PROVISION_PIN_SUCCESSFUL = 32;	// provisioning of the token auth code was successful

		DEVICE_CSR = 40; 	// -> [device_csr]
		DEVICE_CSR_ERROR = 41;  // -> [device_csr]
		DEVICE_CERT_OK = 42; 	// -> [device_cert]
		DEVICE_CERT_ERROR = 43; // -> [device_cert]
		DEVICE_PROV_ERROR = 44; // -> [device_csr] | [device_cert] not in provisioning mode

		CRYPTO_HASH_OK = 50;	// hash computed successfully and stored in hash_value
		CRYPTO_HASH_ERROR = 51;	// some error occurred

		CRYPTO_VERIFY_GOOD = 60;		// signature on data is valid
		CRYPTO_VERIFY_ERROR = 61;		// some error occurred
		CRYPTO_VERIFY_BAD_SIGNATURE = 62;	// signature on data is invalid
		CRYPTO_VERIFY_BAD_CERTIFICATE = 63;	// certificate is invalid
		CRYPTO_VERIFY_LOCALLY_SIGNED = 64;	// signature is valid for a local CA

		REGISTER_EVENT_LISTENER_OK = 70;	// successfully register for events
		REGISTER_EVENT_LISTENER_ERROR = 71;	// error, e.g., already another listener

		TOKEN_ADD_SUCCESSFUL = 90;	// creating a new scd token succeeded
		TOKEN_ADD_FAILED = 91;		// creating a new scd token failed
		TOKEN_REMOVE_SUCCESSFUL = 92;	// freeing the token succeeded
		TOKEN_REMOVE_FAILED = 93;	// freeing the token failed
		TOKEN_SE_REMOVED = 94;		// Event: SE is removed from token

		CMD_UNKNOWN = 100;	// daemon has issued an unknown command
	}
	required Code code = 1;


	optional bytes unwrapped_key = 10;	// unwrapped key in response to UNWRAP_KEY
	optional bytes wrapped_key = 11;	// wrapped key in response to WRAP_KEY

	optional bytes derived_key = 20;	// derived key in response to DERIVE_KEY

	optional bytes device_csr = 40;		// device csr in response to PULL_CSR
	optional bytes hash_value = 50;		// hash_value in response to CRYPTO_HASH_FILE

	optional string token_uuid = 5;		// token_uuid in event TOKEN_SE_REMOVED
}

