/*
 * This file is part of trust|me
 * Copyright(c) 2013 - 2017 Fraunhofer AISEC
 * Fraunhofer-Gesellschaft zur FÃ¶rderung der angewandten Forschung e.V.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2 (GPL 2), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GPL 2 license for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, see <http://www.gnu.org/licenses/>
 *
 * The full GNU General Public License is included in this distribution in
 * the file called "COPYING".
 *
 * Contact Information:
 * Fraunhofer AISEC <trustme@aisec.fraunhofer.de>
 */

syntax = "proto2";

option java_package = "de.fraunhofer.aisec.trustme";

/* crypto.proto: structures and identifiers related to cryptography
 * Modelled after PKCS#1 & co.
 */

message Hash {
	enum Algorithm {
		UNDEFINED = 0;  // use e.g. for fixed application-defined algorithm

		//MD2 = 2;   // deprecated
		//MD4 = 4;   // deprecated
		MD5 = 5;   // deprecated (but still used)

		RIPEMD_128 = 6;
		RIPEMD_160 = 7; // deprecated (but still used)
		RIPEMD_256 = 8;
		RIPEMD_320 = 9;

		//SHA0 = 10;    // deprecated
		SHA1 = 11;

		SHA2_224 = 20;
		SHA2_256 = 21;
		SHA2_384 = 22;
		SHA2_512 = 23;

		SHA3_224 = 30;
		SHA3_256 = 31;
		SHA3_384 = 32;
		SHA3_512 = 33;

		// >= 100: user defined
	}
	optional Algorithm hash_function = 1 [default = UNDEFINED];
	required bytes hash_value = 2;

	// Support for truncated hashes (e.g. use only 256 bits of SHA2_512)
	optional uint32 truncate_bits = 10;   // if indicated, truncate hash to indicated length (in bits)
}

message MGF {
	enum Algorithm {
		MGF1 = 1;
	}
	optional Algorithm algorithm = 1 [default = MGF1];
	optional Hash.Algorithm hash = 2 [default = SHA1];
}

// TODO: think about using PKCS structs (ASN.1) with OpenSSL instead

message Signature {
	enum Algorithm {
		UNDEFINED = 0;  // use e.g. for fixed application-defined algorithm

		// PKCS#1 v2.2 Signature Algorithms
		RSASSA_PSS = 1;
		RSASSA_PKCS1_V1_5 = 2;  // deprecated

		// SEC 1 v2?
		//ECDSA = 10;
	}
	message RSASSA_PSS_Params {
		optional Hash.Algorithm hash = 1 [default = SHA1];
		optional MGF.Algorithm mgf = 2;
		optional uint32 saltLength = 3 [default = 20];
		optional uint32 trailerField = 4 [default = 1];
	}

	optional Algorithm algorithm = 1 [default = UNDEFINED];
	required bytes signature = 2;

	optional RSASSA_PSS_Params rsassa_pss_params = 10;
}

message SignedData {
	required bytes data = 1;
	required Signature signature = 2;
}

